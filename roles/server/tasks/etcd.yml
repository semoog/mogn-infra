---

# => download

- name: etcd | create download dir
  file:
    path: /tmp/etcd
    state: directory
    owner: root
    group: root
    mode: 0700

- name: etcd | download
  get_url:
    url: "{{ ETCD_DOWNLOAD_URL }}/v{{ ETCD_VERSION }}/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    dest: "/tmp/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    owner: root
    group: root
    mode: 0600
    force: True

- name: etcd | extract
  unarchive:
    src: "/tmp/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    dest: /tmp/etcd
    owner: root
    group: root
    mode: 0600
    extra_opts:
      - --strip-components=1
    decrypt: True
    remote_src: True

- name: etcd | set permissions on etc
  file:
    path: /tmp/etcd/etcd
    state: file
    owner: root
    group: root
    mode: 0700

- name: etcd | set permissions on etcdctl
  file:
    path: /tmp/etcd/etcdctl
    state: file
    owner: root
    group: root
    mode: 0700

# => install

- name: etcd | move etcd to bin
  command: mv -f /tmp/etcd/etcd /usr/local/bin

- name: etcd | move etcdctl to bin
  command: mv -f /tmp/etcd/etcdctl /usr/local/bin
  notify: cleanup-etcd-install

# => configuring certificates

- import_tasks: etcd-certs.yml

# => configure

- name: etcd | create list of nodes to be added into the cluster
  set_fact: etcd_nodelist={%for host in groups['servers']%}{{hostvars[host].inventory_hostname}}=https://{{hostvars[host].ip}}:2380{% if not loop.last %},{% endif %}{% endfor %}

- name: etcd | create etcd.conf on node
  template:
    src: templates/etcd.conf.j2
    dest: /etc/etcd/etcd.conf
    owner: root
    group: root
    mode: 0644

- name: etcd | create service
  template: 
    src: templates/etcd.service.j2 
    dest: /lib/systemd/system/etcd.service 
    mode: 0644
  notify: systemctl-daemon-reload

# forces the handler (systemctl-daemon-reload) to run immediately
# instead of at the end of the play
- meta: flush_handlers

# => enable service

- name: etcd | enable / start service
  service: name=etcd.service state=started enabled=yes

# => verify service health

- name: etcd | check service health
  shell: "curl --cacert /etc/etcd/etcd-ca.crt --cert /etc/etcd/server.crt --key /etc/etcd/server.key https://{{ hostvars[inventory_hostname].ip }}:2379/health"
  register: etcd_health_cmd
  changed_when: False

- set_fact: 
    etcd: "{{ etcd_health_cmd.stdout | from_json }}"

- block:
    - name: "etcd | stop play if service is unhealthy"
      debug:
        msg: "!! etcd is unhealthy, manual intervention required. Ending play !!"

    - meta: end_play
  when: etcd.health == 'false'
